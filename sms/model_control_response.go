/*
 * Nexmo Verify API
 *
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * API version: 1.0.9
 * Contact: devrel@nexmo.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sms

import (
	"bytes"
	"encoding/json"
)

// ControlResponse Success
type ControlResponse struct {
	// `cmd` | Code | Description -- | -- | -- Any | 0 | Success 
	Status *string `json:"status,omitempty"`
	// The `cmd` you sent in the request.
	Command *string `json:"command,omitempty"`
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ControlResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ControlResponse) GetStatusOk() (string, bool) {
	if o == nil || o.Status == nil {
		var ret string
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ControlResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ControlResponse) SetStatus(v string) {
	o.Status = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *ControlResponse) GetCommand() string {
	if o == nil || o.Command == nil {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ControlResponse) GetCommandOk() (string, bool) {
	if o == nil || o.Command == nil {
		var ret string
		return ret, false
	}
	return *o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *ControlResponse) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *ControlResponse) SetCommand(v string) {
	o.Command = &v
}

type NullableControlResponse struct {
	Value ControlResponse
	ExplicitNull bool
}

func (v NullableControlResponse) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}	
}

func (v *NullableControlResponse) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}

