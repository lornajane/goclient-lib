/*
 * SMS API
 *
 * With the Nexmo SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * API version: 1.0.5
 * Contact: devrel@nexmo.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sms

import (
	"bytes"
	"encoding/json"
	"os"
)

// InboundMessage struct for InboundMessage
type InboundMessage struct {
	// The phone number that this inbound message was sent from. Numbers are specified in E.164 format.
	Msisdn string `json:"msisdn"`
	// The phone number the message was sent to. **This is your virtual number**. Numbers are specified in E.164 format.
	To string `json:"to"`
	// The ID of the message
	MessageId string `json:"messageId"`
	// The message body for this inbound message.
	Text string `json:"text"`
	// Possible values are:    - `text` - standard text.   - `unicode` - URLencoded   unicode  . This is valid for standard GSM, Arabic, Chinese, double-encoded characters and so on.   - `binary` - a binary message. 
	Type string `json:"type"`
	// The first word in the message body. Converted to upper case.
	Keyword string `json:"keyword"`
	// The time when Nexmo started to push this Delivery Receipt to your webhook endpoint.
	MessageTimestamp string `json:"message-timestamp"`
	// A unix timestamp representation of message-timestamp.
	Timestamp *string `json:"timestamp,omitempty"`
	// A random string that forms part of the signed set of parameters, it adds an extra element of unpredictability into the signature for the request. You use the nonce and timestamp parameters with your shared secret to calculate and validate the signature for inbound messages.
	Nonce *string `json:"nonce,omitempty"`
	// True - if this is a concatenated message. This field does not exist if it is a single message
	Concat *string `json:"concat,omitempty"`
	// The transaction reference. All parts of this message share this value.
	ConcatRef *string `json:"concat-ref,omitempty"`
	// The number of parts in this concatenated message.
	ConcatTotal *string `json:"concat-total,omitempty"`
	// The number of this part in the message. Counting starts at 1.
	ConcatPart *string `json:"concat-part,omitempty"`
	// The content of this message, if type is binary.
	Data **os.File `json:"data,omitempty"`
	// The hex encoded User Data Header, if type is binary
	Udh *string `json:"udh,omitempty"`
}

// GetMsisdn returns the Msisdn field value
func (o *InboundMessage) GetMsisdn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msisdn
}

// SetMsisdn sets field value
func (o *InboundMessage) SetMsisdn(v string) {
	o.Msisdn = v
}

// GetTo returns the To field value
func (o *InboundMessage) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// SetTo sets field value
func (o *InboundMessage) SetTo(v string) {
	o.To = v
}

// GetMessageId returns the MessageId field value
func (o *InboundMessage) GetMessageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageId
}

// SetMessageId sets field value
func (o *InboundMessage) SetMessageId(v string) {
	o.MessageId = v
}

// GetText returns the Text field value
func (o *InboundMessage) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// SetText sets field value
func (o *InboundMessage) SetText(v string) {
	o.Text = v
}

// GetType returns the Type field value
func (o *InboundMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// SetType sets field value
func (o *InboundMessage) SetType(v string) {
	o.Type = v
}

// GetKeyword returns the Keyword field value
func (o *InboundMessage) GetKeyword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Keyword
}

// SetKeyword sets field value
func (o *InboundMessage) SetKeyword(v string) {
	o.Keyword = v
}

// GetMessageTimestamp returns the MessageTimestamp field value
func (o *InboundMessage) GetMessageTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageTimestamp
}

// SetMessageTimestamp sets field value
func (o *InboundMessage) SetMessageTimestamp(v string) {
	o.MessageTimestamp = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *InboundMessage) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InboundMessage) GetTimestampOk() (string, bool) {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret, false
	}
	return *o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *InboundMessage) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *InboundMessage) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *InboundMessage) GetNonce() string {
	if o == nil || o.Nonce == nil {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InboundMessage) GetNonceOk() (string, bool) {
	if o == nil || o.Nonce == nil {
		var ret string
		return ret, false
	}
	return *o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *InboundMessage) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *InboundMessage) SetNonce(v string) {
	o.Nonce = &v
}

// GetConcat returns the Concat field value if set, zero value otherwise.
func (o *InboundMessage) GetConcat() string {
	if o == nil || o.Concat == nil {
		var ret string
		return ret
	}
	return *o.Concat
}

// GetConcatOk returns a tuple with the Concat field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InboundMessage) GetConcatOk() (string, bool) {
	if o == nil || o.Concat == nil {
		var ret string
		return ret, false
	}
	return *o.Concat, true
}

// HasConcat returns a boolean if a field has been set.
func (o *InboundMessage) HasConcat() bool {
	if o != nil && o.Concat != nil {
		return true
	}

	return false
}

// SetConcat gets a reference to the given string and assigns it to the Concat field.
func (o *InboundMessage) SetConcat(v string) {
	o.Concat = &v
}

// GetConcatRef returns the ConcatRef field value if set, zero value otherwise.
func (o *InboundMessage) GetConcatRef() string {
	if o == nil || o.ConcatRef == nil {
		var ret string
		return ret
	}
	return *o.ConcatRef
}

// GetConcatRefOk returns a tuple with the ConcatRef field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InboundMessage) GetConcatRefOk() (string, bool) {
	if o == nil || o.ConcatRef == nil {
		var ret string
		return ret, false
	}
	return *o.ConcatRef, true
}

// HasConcatRef returns a boolean if a field has been set.
func (o *InboundMessage) HasConcatRef() bool {
	if o != nil && o.ConcatRef != nil {
		return true
	}

	return false
}

// SetConcatRef gets a reference to the given string and assigns it to the ConcatRef field.
func (o *InboundMessage) SetConcatRef(v string) {
	o.ConcatRef = &v
}

// GetConcatTotal returns the ConcatTotal field value if set, zero value otherwise.
func (o *InboundMessage) GetConcatTotal() string {
	if o == nil || o.ConcatTotal == nil {
		var ret string
		return ret
	}
	return *o.ConcatTotal
}

// GetConcatTotalOk returns a tuple with the ConcatTotal field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InboundMessage) GetConcatTotalOk() (string, bool) {
	if o == nil || o.ConcatTotal == nil {
		var ret string
		return ret, false
	}
	return *o.ConcatTotal, true
}

// HasConcatTotal returns a boolean if a field has been set.
func (o *InboundMessage) HasConcatTotal() bool {
	if o != nil && o.ConcatTotal != nil {
		return true
	}

	return false
}

// SetConcatTotal gets a reference to the given string and assigns it to the ConcatTotal field.
func (o *InboundMessage) SetConcatTotal(v string) {
	o.ConcatTotal = &v
}

// GetConcatPart returns the ConcatPart field value if set, zero value otherwise.
func (o *InboundMessage) GetConcatPart() string {
	if o == nil || o.ConcatPart == nil {
		var ret string
		return ret
	}
	return *o.ConcatPart
}

// GetConcatPartOk returns a tuple with the ConcatPart field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InboundMessage) GetConcatPartOk() (string, bool) {
	if o == nil || o.ConcatPart == nil {
		var ret string
		return ret, false
	}
	return *o.ConcatPart, true
}

// HasConcatPart returns a boolean if a field has been set.
func (o *InboundMessage) HasConcatPart() bool {
	if o != nil && o.ConcatPart != nil {
		return true
	}

	return false
}

// SetConcatPart gets a reference to the given string and assigns it to the ConcatPart field.
func (o *InboundMessage) SetConcatPart(v string) {
	o.ConcatPart = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *InboundMessage) GetData() *os.File {
	if o == nil || o.Data == nil {
		var ret *os.File
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InboundMessage) GetDataOk() (*os.File, bool) {
	if o == nil || o.Data == nil {
		var ret *os.File
		return ret, false
	}
	return *o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *InboundMessage) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given *os.File and assigns it to the Data field.
func (o *InboundMessage) SetData(v *os.File) {
	o.Data = &v
}

// GetUdh returns the Udh field value if set, zero value otherwise.
func (o *InboundMessage) GetUdh() string {
	if o == nil || o.Udh == nil {
		var ret string
		return ret
	}
	return *o.Udh
}

// GetUdhOk returns a tuple with the Udh field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InboundMessage) GetUdhOk() (string, bool) {
	if o == nil || o.Udh == nil {
		var ret string
		return ret, false
	}
	return *o.Udh, true
}

// HasUdh returns a boolean if a field has been set.
func (o *InboundMessage) HasUdh() bool {
	if o != nil && o.Udh != nil {
		return true
	}

	return false
}

// SetUdh gets a reference to the given string and assigns it to the Udh field.
func (o *InboundMessage) SetUdh(v string) {
	o.Udh = &v
}

type NullableInboundMessage struct {
	Value InboundMessage
	ExplicitNull bool
}

func (v NullableInboundMessage) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}	
}

func (v *NullableInboundMessage) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}

