/*
 * Nexmo Verify API
 *
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * API version: 1.0.9
 * Contact: devrel@nexmo.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sms

import (
	"bytes"
	"encoding/json"
)

// SearchErrorResponse Error
type SearchErrorResponse struct {
	// The `request_id` that you received in the response to the Verify request and used in the Verify search request. May be empty in an error situation.
	RequestId *string `json:"request_id,omitempty"`
	// Code | Description -- | -- IN PROGRESS | The search is still in progress. SUCCESS | Your user entered a correct verification code. FAILED | Your user entered an incorrect code more than three times. EXPIRED | Your user did not enter a code before the `pin_expiry` time elapsed. CANCELLED | The verification process was cancelled by a Verify control request. 101 | You supplied an invalid `request_id`, or the data is not available. Note that for recently-completed requests, there can be a delay of up to 1 minute before the results are available in search. 
	Status *string `json:"status,omitempty"`
	// If `status` is not `SUCCESS`, this message explains the issue encountered.
	ErrorText *string `json:"error_text,omitempty"`
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *SearchErrorResponse) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchErrorResponse) GetRequestIdOk() (string, bool) {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret, false
	}
	return *o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *SearchErrorResponse) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *SearchErrorResponse) SetRequestId(v string) {
	o.RequestId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SearchErrorResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchErrorResponse) GetStatusOk() (string, bool) {
	if o == nil || o.Status == nil {
		var ret string
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SearchErrorResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SearchErrorResponse) SetStatus(v string) {
	o.Status = &v
}

// GetErrorText returns the ErrorText field value if set, zero value otherwise.
func (o *SearchErrorResponse) GetErrorText() string {
	if o == nil || o.ErrorText == nil {
		var ret string
		return ret
	}
	return *o.ErrorText
}

// GetErrorTextOk returns a tuple with the ErrorText field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchErrorResponse) GetErrorTextOk() (string, bool) {
	if o == nil || o.ErrorText == nil {
		var ret string
		return ret, false
	}
	return *o.ErrorText, true
}

// HasErrorText returns a boolean if a field has been set.
func (o *SearchErrorResponse) HasErrorText() bool {
	if o != nil && o.ErrorText != nil {
		return true
	}

	return false
}

// SetErrorText gets a reference to the given string and assigns it to the ErrorText field.
func (o *SearchErrorResponse) SetErrorText(v string) {
	o.ErrorText = &v
}

type NullableSearchErrorResponse struct {
	Value SearchErrorResponse
	ExplicitNull bool
}

func (v NullableSearchErrorResponse) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}	
}

func (v *NullableSearchErrorResponse) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}

