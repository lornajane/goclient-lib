/*
 * Nexmo Verify API
 *
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * API version: 1.0.9
 * Contact: devrel@nexmo.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sms

import (
	"bytes"
	"encoding/json"
)

// RequestErrorResponse Error
type RequestErrorResponse struct {
	// The unique ID of the Verify request. This may be blank in an error situation
	RequestId *string `json:"request_id,omitempty"`
	// Code | Text | Description -- | -- | -- 0 | Success | The request was successfully accepted by Nexmo. 1 | Throttled | You are trying to send more than the maximum of 30 requests per second. 2 | Your request is incomplete and missing the mandatory parameter `$parameter` | The stated parameter is missing. 3 | Invalid value for parameter `$parameter` | Invalid value for parameter. If you see Facility not allowed in the error text, check that you are using the correct Base URL in your request. 4 | Invalid credentials were provided | The supplied API key or secret in the request is either invalid or disabled. 5 | Internal Error | An error occurred processing this request in the Cloud Communications Platform. 6 | The Nexmo platform was unable to process this message for the following reason: `$reason` | The request could not be routed. 7 | The number you are trying to verify is blacklisted for verification. | 8 | The api_key you supplied is for an account that has been barred from submitting messages. | 9 | Partner quota exceeded | Your account does not have sufficient credit to process this request. 10 | Concurrent verifications to the same number are not allowed |  15 | The destination number is not in a supported network | The request has been rejected. Find out more about this error in the [Knowledge Base](https://help.nexmo.com/hc/en-us/articles/360018406532-Verify-On-demand-Service-to-High-Risk-Countries) 16 | The code inserted does not match the expected value | 17 | The wrong code was provided too many times | You can run Verify check on a specific `request_id` up to three times unless a new verification code is generated. If you check a request more than three times, it is set to FAILED and you cannot check it again. 18 | Too many request_ids provided | You added more than the maximum ten `request_id`s to your request. 19 | No more events are left to execute for this request | 20 | This account does not support the parameter: pin_code. | Only certain accounts have the ability to set the `pin_code`. Please contact your account manager for more information. 101 | No request found | There are no matching verify requests. 
	Status *string `json:"status,omitempty"`
	// If `status` is non-zero, this explains the error encountered.
	ErrorText *string `json:"error_text,omitempty"`
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *RequestErrorResponse) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RequestErrorResponse) GetRequestIdOk() (string, bool) {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret, false
	}
	return *o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *RequestErrorResponse) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *RequestErrorResponse) SetRequestId(v string) {
	o.RequestId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RequestErrorResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RequestErrorResponse) GetStatusOk() (string, bool) {
	if o == nil || o.Status == nil {
		var ret string
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RequestErrorResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RequestErrorResponse) SetStatus(v string) {
	o.Status = &v
}

// GetErrorText returns the ErrorText field value if set, zero value otherwise.
func (o *RequestErrorResponse) GetErrorText() string {
	if o == nil || o.ErrorText == nil {
		var ret string
		return ret
	}
	return *o.ErrorText
}

// GetErrorTextOk returns a tuple with the ErrorText field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *RequestErrorResponse) GetErrorTextOk() (string, bool) {
	if o == nil || o.ErrorText == nil {
		var ret string
		return ret, false
	}
	return *o.ErrorText, true
}

// HasErrorText returns a boolean if a field has been set.
func (o *RequestErrorResponse) HasErrorText() bool {
	if o != nil && o.ErrorText != nil {
		return true
	}

	return false
}

// SetErrorText gets a reference to the given string and assigns it to the ErrorText field.
func (o *RequestErrorResponse) SetErrorText(v string) {
	o.ErrorText = &v
}

type NullableRequestErrorResponse struct {
	Value RequestErrorResponse
	ExplicitNull bool
}

func (v NullableRequestErrorResponse) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}	
}

func (v *NullableRequestErrorResponse) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}

