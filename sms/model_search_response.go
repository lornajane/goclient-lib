/*
 * Nexmo Verify API
 *
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * API version: 1.0.9
 * Contact: devrel@nexmo.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sms

import (
	"bytes"
	"encoding/json"
)

// SearchResponse Success
type SearchResponse struct {
	// The `request_id` that you received in the response to the Verify request and used in the Verify search request.
	RequestId *string `json:"request_id,omitempty"`
	// The Nexmo account ID the request was for.
	AccountId *string `json:"account_id,omitempty"`
	// Code | Description -- | -- IN PROGRESS | The search is still in progress. SUCCESS | Your user entered a correct verification code. FAILED | Your user entered an incorrect code more than three times. EXPIRED | Your user did not enter a code before the `pin_expiry` time elapsed. CANCELLED | The verification process was cancelled by a Verify control request. 
	Status *string `json:"status,omitempty"`
	// The phone number this verification request was used for.
	Number *string `json:"number,omitempty"`
	// The cost incurred for this verification request.
	Price *string `json:"price,omitempty"`
	// The currency code.
	Currency *string `json:"currency,omitempty"`
	// The `sender_id` you provided in the Verify request.
	SenderId *string `json:"sender_id,omitempty"`
	// The date and time the verification request was submitted, in the following format YYYY-MM-DD HH:MM:SS.
	DateSubmitted *string `json:"date_submitted,omitempty"`
	// The date and time the verification request was completed. This response parameter is in the following format YYYY-MM-DD HH:MM:SS.
	DateFinalized *string `json:"date_finalized,omitempty"`
	// The time the first verification attempt was made, in the following format YYYY-MM-DD HH:MM:SS.
	FirstEventDate *string `json:"first_event_date,omitempty"`
	// The time the last verification attempt was made, in the following format YYYY-MM-DD HH:MM:SS.
	LastEventDate *string `json:"last_event_date,omitempty"`
	// The list of checks made for this verification and their outcomes.
	Checks *[]SearchResponseChecks `json:"checks,omitempty"`
	// The events that have taken place to verify this number, and their unique identifiers.
	Events *[]SearchResponseEvents `json:"events,omitempty"`
	// This field may not be present, depending on your pricing model. The value indicates the cost (in EUR) of the calls made and messages sent for the verification process. This value may be updated during and shortly after the request completes because user input events can overlap with message/call events. When this field is present, the total cost of the verification is the sum of this field and the `price` field. 
	EstimatedPriceMessagesSent *string `json:"estimated_price_messages_sent,omitempty"`
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *SearchResponse) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetRequestIdOk() (string, bool) {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret, false
	}
	return *o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *SearchResponse) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *SearchResponse) SetRequestId(v string) {
	o.RequestId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *SearchResponse) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetAccountIdOk() (string, bool) {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret, false
	}
	return *o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *SearchResponse) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *SearchResponse) SetAccountId(v string) {
	o.AccountId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SearchResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetStatusOk() (string, bool) {
	if o == nil || o.Status == nil {
		var ret string
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SearchResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SearchResponse) SetStatus(v string) {
	o.Status = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *SearchResponse) GetNumber() string {
	if o == nil || o.Number == nil {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetNumberOk() (string, bool) {
	if o == nil || o.Number == nil {
		var ret string
		return ret, false
	}
	return *o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *SearchResponse) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *SearchResponse) SetNumber(v string) {
	o.Number = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SearchResponse) GetPrice() string {
	if o == nil || o.Price == nil {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetPriceOk() (string, bool) {
	if o == nil || o.Price == nil {
		var ret string
		return ret, false
	}
	return *o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SearchResponse) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *SearchResponse) SetPrice(v string) {
	o.Price = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *SearchResponse) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetCurrencyOk() (string, bool) {
	if o == nil || o.Currency == nil {
		var ret string
		return ret, false
	}
	return *o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *SearchResponse) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *SearchResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetSenderId returns the SenderId field value if set, zero value otherwise.
func (o *SearchResponse) GetSenderId() string {
	if o == nil || o.SenderId == nil {
		var ret string
		return ret
	}
	return *o.SenderId
}

// GetSenderIdOk returns a tuple with the SenderId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetSenderIdOk() (string, bool) {
	if o == nil || o.SenderId == nil {
		var ret string
		return ret, false
	}
	return *o.SenderId, true
}

// HasSenderId returns a boolean if a field has been set.
func (o *SearchResponse) HasSenderId() bool {
	if o != nil && o.SenderId != nil {
		return true
	}

	return false
}

// SetSenderId gets a reference to the given string and assigns it to the SenderId field.
func (o *SearchResponse) SetSenderId(v string) {
	o.SenderId = &v
}

// GetDateSubmitted returns the DateSubmitted field value if set, zero value otherwise.
func (o *SearchResponse) GetDateSubmitted() string {
	if o == nil || o.DateSubmitted == nil {
		var ret string
		return ret
	}
	return *o.DateSubmitted
}

// GetDateSubmittedOk returns a tuple with the DateSubmitted field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetDateSubmittedOk() (string, bool) {
	if o == nil || o.DateSubmitted == nil {
		var ret string
		return ret, false
	}
	return *o.DateSubmitted, true
}

// HasDateSubmitted returns a boolean if a field has been set.
func (o *SearchResponse) HasDateSubmitted() bool {
	if o != nil && o.DateSubmitted != nil {
		return true
	}

	return false
}

// SetDateSubmitted gets a reference to the given string and assigns it to the DateSubmitted field.
func (o *SearchResponse) SetDateSubmitted(v string) {
	o.DateSubmitted = &v
}

// GetDateFinalized returns the DateFinalized field value if set, zero value otherwise.
func (o *SearchResponse) GetDateFinalized() string {
	if o == nil || o.DateFinalized == nil {
		var ret string
		return ret
	}
	return *o.DateFinalized
}

// GetDateFinalizedOk returns a tuple with the DateFinalized field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetDateFinalizedOk() (string, bool) {
	if o == nil || o.DateFinalized == nil {
		var ret string
		return ret, false
	}
	return *o.DateFinalized, true
}

// HasDateFinalized returns a boolean if a field has been set.
func (o *SearchResponse) HasDateFinalized() bool {
	if o != nil && o.DateFinalized != nil {
		return true
	}

	return false
}

// SetDateFinalized gets a reference to the given string and assigns it to the DateFinalized field.
func (o *SearchResponse) SetDateFinalized(v string) {
	o.DateFinalized = &v
}

// GetFirstEventDate returns the FirstEventDate field value if set, zero value otherwise.
func (o *SearchResponse) GetFirstEventDate() string {
	if o == nil || o.FirstEventDate == nil {
		var ret string
		return ret
	}
	return *o.FirstEventDate
}

// GetFirstEventDateOk returns a tuple with the FirstEventDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetFirstEventDateOk() (string, bool) {
	if o == nil || o.FirstEventDate == nil {
		var ret string
		return ret, false
	}
	return *o.FirstEventDate, true
}

// HasFirstEventDate returns a boolean if a field has been set.
func (o *SearchResponse) HasFirstEventDate() bool {
	if o != nil && o.FirstEventDate != nil {
		return true
	}

	return false
}

// SetFirstEventDate gets a reference to the given string and assigns it to the FirstEventDate field.
func (o *SearchResponse) SetFirstEventDate(v string) {
	o.FirstEventDate = &v
}

// GetLastEventDate returns the LastEventDate field value if set, zero value otherwise.
func (o *SearchResponse) GetLastEventDate() string {
	if o == nil || o.LastEventDate == nil {
		var ret string
		return ret
	}
	return *o.LastEventDate
}

// GetLastEventDateOk returns a tuple with the LastEventDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetLastEventDateOk() (string, bool) {
	if o == nil || o.LastEventDate == nil {
		var ret string
		return ret, false
	}
	return *o.LastEventDate, true
}

// HasLastEventDate returns a boolean if a field has been set.
func (o *SearchResponse) HasLastEventDate() bool {
	if o != nil && o.LastEventDate != nil {
		return true
	}

	return false
}

// SetLastEventDate gets a reference to the given string and assigns it to the LastEventDate field.
func (o *SearchResponse) SetLastEventDate(v string) {
	o.LastEventDate = &v
}

// GetChecks returns the Checks field value if set, zero value otherwise.
func (o *SearchResponse) GetChecks() []SearchResponseChecks {
	if o == nil || o.Checks == nil {
		var ret []SearchResponseChecks
		return ret
	}
	return *o.Checks
}

// GetChecksOk returns a tuple with the Checks field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetChecksOk() ([]SearchResponseChecks, bool) {
	if o == nil || o.Checks == nil {
		var ret []SearchResponseChecks
		return ret, false
	}
	return *o.Checks, true
}

// HasChecks returns a boolean if a field has been set.
func (o *SearchResponse) HasChecks() bool {
	if o != nil && o.Checks != nil {
		return true
	}

	return false
}

// SetChecks gets a reference to the given []SearchResponseChecks and assigns it to the Checks field.
func (o *SearchResponse) SetChecks(v []SearchResponseChecks) {
	o.Checks = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *SearchResponse) GetEvents() []SearchResponseEvents {
	if o == nil || o.Events == nil {
		var ret []SearchResponseEvents
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetEventsOk() ([]SearchResponseEvents, bool) {
	if o == nil || o.Events == nil {
		var ret []SearchResponseEvents
		return ret, false
	}
	return *o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *SearchResponse) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []SearchResponseEvents and assigns it to the Events field.
func (o *SearchResponse) SetEvents(v []SearchResponseEvents) {
	o.Events = &v
}

// GetEstimatedPriceMessagesSent returns the EstimatedPriceMessagesSent field value if set, zero value otherwise.
func (o *SearchResponse) GetEstimatedPriceMessagesSent() string {
	if o == nil || o.EstimatedPriceMessagesSent == nil {
		var ret string
		return ret
	}
	return *o.EstimatedPriceMessagesSent
}

// GetEstimatedPriceMessagesSentOk returns a tuple with the EstimatedPriceMessagesSent field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetEstimatedPriceMessagesSentOk() (string, bool) {
	if o == nil || o.EstimatedPriceMessagesSent == nil {
		var ret string
		return ret, false
	}
	return *o.EstimatedPriceMessagesSent, true
}

// HasEstimatedPriceMessagesSent returns a boolean if a field has been set.
func (o *SearchResponse) HasEstimatedPriceMessagesSent() bool {
	if o != nil && o.EstimatedPriceMessagesSent != nil {
		return true
	}

	return false
}

// SetEstimatedPriceMessagesSent gets a reference to the given string and assigns it to the EstimatedPriceMessagesSent field.
func (o *SearchResponse) SetEstimatedPriceMessagesSent(v string) {
	o.EstimatedPriceMessagesSent = &v
}

type NullableSearchResponse struct {
	Value SearchResponse
	ExplicitNull bool
}

func (v NullableSearchResponse) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}	
}

func (v *NullableSearchResponse) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}

