/*
 * SMS API
 *
 * With the Nexmo SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * API version: 1.0.5
 * Contact: devrel@nexmo.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sms

import (
	"bytes"
	"encoding/json"
)

// NewMessage struct for NewMessage
type NewMessage struct {
	// Your API key
	ApiKey string `json:"api_key"`
	// Your API secret. Required unless `sig` is provided
	ApiSecret *string `json:"api_secret,omitempty"`
	// The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details.
	Sig *string `json:"sig,omitempty"`
	// The name or number the message should be sent from. Alphanumeric senderID's are not supported in all countries, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format.
	From string `json:"from"`
	// The number that the message should be sent to. Numbers are specified in E.164 format.
	To string `json:"to"`
	// The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the `type` to `text`. If your message contains characters outside this range, then you will need to set the `type` to `unicode`.
	Text *string `json:"text,omitempty"`
	// **Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Nexmo attempt delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes.
	Ttl *int32 `json:"ttl,omitempty"`
	// **Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](https://developer.nexmo.com/messaging/sms/building-blocks/receive-a-delivery-receipt).
	StatusReportReq *bool `json:"status-report-req,omitempty"`
	// **Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard.
	Callback *string `json:"callback,omitempty"`
	// **Advanced**: The Data Coding Scheme value of the message
	MessageClass *int32 `json:"message-class,omitempty"`
	// **Advanced**: The format of the message body
	Type *string `json:"type,omitempty"`
	// **Advanced**: A business card in [vCard format](https://en.wikipedia.org/wiki/VCard). Depends on `type` parameter having the value `vcard`.
	Vcard *string `json:"vcard,omitempty"`
	// **Advanced**: A calendar event in [vCal format](https://en.wikipedia.org/wiki/VCal). Depends on `type` parameter having the value `vcal`.
	Vcal *string `json:"vcal,omitempty"`
	// **Advanced**: Hex encoded binary data. Depends on `type` parameter having the value `binary`.
	Body *string `json:"body,omitempty"`
	// **Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on `type` parameter having the value `binary`.
	Udh *string `json:"udh,omitempty"`
	// **Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with `udh`.
	ProtocolId *int32 `json:"protocol-id,omitempty"`
	// **Advanced**: The title for a wappush SMS. Depends on `type` parameter having the value `wappush`.
	Title *string `json:"title,omitempty"`
	// **Advanced**: The URL of your website. Depends on `type` parameter having the value `wappush`.
	Url *string `json:"url,omitempty"`
	// **Advanced**: The availability for an SMS in milliseconds. Depends on `type` parameter having the value `wappush`.
	Validity *string `json:"validity,omitempty"`
	// **Advanced**: You can optionally include your own reference of up to 40 characters.
	ClientRef *string `json:"client-ref,omitempty"`
	// **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)
	AccountRef *string `json:"account-ref,omitempty"`
}

// GetApiKey returns the ApiKey field value
func (o *NewMessage) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// SetApiKey sets field value
func (o *NewMessage) SetApiKey(v string) {
	o.ApiKey = v
}

// GetApiSecret returns the ApiSecret field value if set, zero value otherwise.
func (o *NewMessage) GetApiSecret() string {
	if o == nil || o.ApiSecret == nil {
		var ret string
		return ret
	}
	return *o.ApiSecret
}

// GetApiSecretOk returns a tuple with the ApiSecret field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetApiSecretOk() (string, bool) {
	if o == nil || o.ApiSecret == nil {
		var ret string
		return ret, false
	}
	return *o.ApiSecret, true
}

// HasApiSecret returns a boolean if a field has been set.
func (o *NewMessage) HasApiSecret() bool {
	if o != nil && o.ApiSecret != nil {
		return true
	}

	return false
}

// SetApiSecret gets a reference to the given string and assigns it to the ApiSecret field.
func (o *NewMessage) SetApiSecret(v string) {
	o.ApiSecret = &v
}

// GetSig returns the Sig field value if set, zero value otherwise.
func (o *NewMessage) GetSig() string {
	if o == nil || o.Sig == nil {
		var ret string
		return ret
	}
	return *o.Sig
}

// GetSigOk returns a tuple with the Sig field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetSigOk() (string, bool) {
	if o == nil || o.Sig == nil {
		var ret string
		return ret, false
	}
	return *o.Sig, true
}

// HasSig returns a boolean if a field has been set.
func (o *NewMessage) HasSig() bool {
	if o != nil && o.Sig != nil {
		return true
	}

	return false
}

// SetSig gets a reference to the given string and assigns it to the Sig field.
func (o *NewMessage) SetSig(v string) {
	o.Sig = &v
}

// GetFrom returns the From field value
func (o *NewMessage) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// SetFrom sets field value
func (o *NewMessage) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value
func (o *NewMessage) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// SetTo sets field value
func (o *NewMessage) SetTo(v string) {
	o.To = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *NewMessage) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetTextOk() (string, bool) {
	if o == nil || o.Text == nil {
		var ret string
		return ret, false
	}
	return *o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *NewMessage) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *NewMessage) SetText(v string) {
	o.Text = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *NewMessage) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetTtlOk() (int32, bool) {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret, false
	}
	return *o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *NewMessage) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *NewMessage) SetTtl(v int32) {
	o.Ttl = &v
}

// GetStatusReportReq returns the StatusReportReq field value if set, zero value otherwise.
func (o *NewMessage) GetStatusReportReq() bool {
	if o == nil || o.StatusReportReq == nil {
		var ret bool
		return ret
	}
	return *o.StatusReportReq
}

// GetStatusReportReqOk returns a tuple with the StatusReportReq field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetStatusReportReqOk() (bool, bool) {
	if o == nil || o.StatusReportReq == nil {
		var ret bool
		return ret, false
	}
	return *o.StatusReportReq, true
}

// HasStatusReportReq returns a boolean if a field has been set.
func (o *NewMessage) HasStatusReportReq() bool {
	if o != nil && o.StatusReportReq != nil {
		return true
	}

	return false
}

// SetStatusReportReq gets a reference to the given bool and assigns it to the StatusReportReq field.
func (o *NewMessage) SetStatusReportReq(v bool) {
	o.StatusReportReq = &v
}

// GetCallback returns the Callback field value if set, zero value otherwise.
func (o *NewMessage) GetCallback() string {
	if o == nil || o.Callback == nil {
		var ret string
		return ret
	}
	return *o.Callback
}

// GetCallbackOk returns a tuple with the Callback field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetCallbackOk() (string, bool) {
	if o == nil || o.Callback == nil {
		var ret string
		return ret, false
	}
	return *o.Callback, true
}

// HasCallback returns a boolean if a field has been set.
func (o *NewMessage) HasCallback() bool {
	if o != nil && o.Callback != nil {
		return true
	}

	return false
}

// SetCallback gets a reference to the given string and assigns it to the Callback field.
func (o *NewMessage) SetCallback(v string) {
	o.Callback = &v
}

// GetMessageClass returns the MessageClass field value if set, zero value otherwise.
func (o *NewMessage) GetMessageClass() int32 {
	if o == nil || o.MessageClass == nil {
		var ret int32
		return ret
	}
	return *o.MessageClass
}

// GetMessageClassOk returns a tuple with the MessageClass field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetMessageClassOk() (int32, bool) {
	if o == nil || o.MessageClass == nil {
		var ret int32
		return ret, false
	}
	return *o.MessageClass, true
}

// HasMessageClass returns a boolean if a field has been set.
func (o *NewMessage) HasMessageClass() bool {
	if o != nil && o.MessageClass != nil {
		return true
	}

	return false
}

// SetMessageClass gets a reference to the given int32 and assigns it to the MessageClass field.
func (o *NewMessage) SetMessageClass(v int32) {
	o.MessageClass = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NewMessage) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetTypeOk() (string, bool) {
	if o == nil || o.Type == nil {
		var ret string
		return ret, false
	}
	return *o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NewMessage) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NewMessage) SetType(v string) {
	o.Type = &v
}

// GetVcard returns the Vcard field value if set, zero value otherwise.
func (o *NewMessage) GetVcard() string {
	if o == nil || o.Vcard == nil {
		var ret string
		return ret
	}
	return *o.Vcard
}

// GetVcardOk returns a tuple with the Vcard field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetVcardOk() (string, bool) {
	if o == nil || o.Vcard == nil {
		var ret string
		return ret, false
	}
	return *o.Vcard, true
}

// HasVcard returns a boolean if a field has been set.
func (o *NewMessage) HasVcard() bool {
	if o != nil && o.Vcard != nil {
		return true
	}

	return false
}

// SetVcard gets a reference to the given string and assigns it to the Vcard field.
func (o *NewMessage) SetVcard(v string) {
	o.Vcard = &v
}

// GetVcal returns the Vcal field value if set, zero value otherwise.
func (o *NewMessage) GetVcal() string {
	if o == nil || o.Vcal == nil {
		var ret string
		return ret
	}
	return *o.Vcal
}

// GetVcalOk returns a tuple with the Vcal field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetVcalOk() (string, bool) {
	if o == nil || o.Vcal == nil {
		var ret string
		return ret, false
	}
	return *o.Vcal, true
}

// HasVcal returns a boolean if a field has been set.
func (o *NewMessage) HasVcal() bool {
	if o != nil && o.Vcal != nil {
		return true
	}

	return false
}

// SetVcal gets a reference to the given string and assigns it to the Vcal field.
func (o *NewMessage) SetVcal(v string) {
	o.Vcal = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *NewMessage) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetBodyOk() (string, bool) {
	if o == nil || o.Body == nil {
		var ret string
		return ret, false
	}
	return *o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *NewMessage) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *NewMessage) SetBody(v string) {
	o.Body = &v
}

// GetUdh returns the Udh field value if set, zero value otherwise.
func (o *NewMessage) GetUdh() string {
	if o == nil || o.Udh == nil {
		var ret string
		return ret
	}
	return *o.Udh
}

// GetUdhOk returns a tuple with the Udh field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetUdhOk() (string, bool) {
	if o == nil || o.Udh == nil {
		var ret string
		return ret, false
	}
	return *o.Udh, true
}

// HasUdh returns a boolean if a field has been set.
func (o *NewMessage) HasUdh() bool {
	if o != nil && o.Udh != nil {
		return true
	}

	return false
}

// SetUdh gets a reference to the given string and assigns it to the Udh field.
func (o *NewMessage) SetUdh(v string) {
	o.Udh = &v
}

// GetProtocolId returns the ProtocolId field value if set, zero value otherwise.
func (o *NewMessage) GetProtocolId() int32 {
	if o == nil || o.ProtocolId == nil {
		var ret int32
		return ret
	}
	return *o.ProtocolId
}

// GetProtocolIdOk returns a tuple with the ProtocolId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetProtocolIdOk() (int32, bool) {
	if o == nil || o.ProtocolId == nil {
		var ret int32
		return ret, false
	}
	return *o.ProtocolId, true
}

// HasProtocolId returns a boolean if a field has been set.
func (o *NewMessage) HasProtocolId() bool {
	if o != nil && o.ProtocolId != nil {
		return true
	}

	return false
}

// SetProtocolId gets a reference to the given int32 and assigns it to the ProtocolId field.
func (o *NewMessage) SetProtocolId(v int32) {
	o.ProtocolId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NewMessage) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetTitleOk() (string, bool) {
	if o == nil || o.Title == nil {
		var ret string
		return ret, false
	}
	return *o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NewMessage) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *NewMessage) SetTitle(v string) {
	o.Title = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *NewMessage) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetUrlOk() (string, bool) {
	if o == nil || o.Url == nil {
		var ret string
		return ret, false
	}
	return *o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *NewMessage) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *NewMessage) SetUrl(v string) {
	o.Url = &v
}

// GetValidity returns the Validity field value if set, zero value otherwise.
func (o *NewMessage) GetValidity() string {
	if o == nil || o.Validity == nil {
		var ret string
		return ret
	}
	return *o.Validity
}

// GetValidityOk returns a tuple with the Validity field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetValidityOk() (string, bool) {
	if o == nil || o.Validity == nil {
		var ret string
		return ret, false
	}
	return *o.Validity, true
}

// HasValidity returns a boolean if a field has been set.
func (o *NewMessage) HasValidity() bool {
	if o != nil && o.Validity != nil {
		return true
	}

	return false
}

// SetValidity gets a reference to the given string and assigns it to the Validity field.
func (o *NewMessage) SetValidity(v string) {
	o.Validity = &v
}

// GetClientRef returns the ClientRef field value if set, zero value otherwise.
func (o *NewMessage) GetClientRef() string {
	if o == nil || o.ClientRef == nil {
		var ret string
		return ret
	}
	return *o.ClientRef
}

// GetClientRefOk returns a tuple with the ClientRef field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetClientRefOk() (string, bool) {
	if o == nil || o.ClientRef == nil {
		var ret string
		return ret, false
	}
	return *o.ClientRef, true
}

// HasClientRef returns a boolean if a field has been set.
func (o *NewMessage) HasClientRef() bool {
	if o != nil && o.ClientRef != nil {
		return true
	}

	return false
}

// SetClientRef gets a reference to the given string and assigns it to the ClientRef field.
func (o *NewMessage) SetClientRef(v string) {
	o.ClientRef = &v
}

// GetAccountRef returns the AccountRef field value if set, zero value otherwise.
func (o *NewMessage) GetAccountRef() string {
	if o == nil || o.AccountRef == nil {
		var ret string
		return ret
	}
	return *o.AccountRef
}

// GetAccountRefOk returns a tuple with the AccountRef field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewMessage) GetAccountRefOk() (string, bool) {
	if o == nil || o.AccountRef == nil {
		var ret string
		return ret, false
	}
	return *o.AccountRef, true
}

// HasAccountRef returns a boolean if a field has been set.
func (o *NewMessage) HasAccountRef() bool {
	if o != nil && o.AccountRef != nil {
		return true
	}

	return false
}

// SetAccountRef gets a reference to the given string and assigns it to the AccountRef field.
func (o *NewMessage) SetAccountRef(v string) {
	o.AccountRef = &v
}

type NullableNewMessage struct {
	Value NewMessage
	ExplicitNull bool
}

func (v NullableNewMessage) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}	
}

func (v *NullableNewMessage) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}

