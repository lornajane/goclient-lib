/*
 * SMS API
 *
 * With the Nexmo SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * API version: 1.0.5
 * Contact: devrel@nexmo.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sms

import (
	"bytes"
	"encoding/json"
)

// Message struct for Message
type Message struct {
	// The number the message was sent to. Numbers are specified in E.164 format.
	To *string `json:"to,omitempty"`
	// The ID of the message
	MessageId *string `json:"message-id,omitempty"`
	// The status of the message. See [Troubleshooting Failed SMS](https://developer.nexmo.com/messaging/sms/guides/troubleshooting-sms).
	Status *string `json:"status,omitempty"`
	// Your remaining balance
	RemainingBalance *string `json:"remaining-balance,omitempty"`
	// The cost of the message
	MessagePrice *string `json:"message-price,omitempty"`
	// The ID of the network of the recipient
	Network *string `json:"network,omitempty"`
	// **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)
	AccountRef *string `json:"account-ref,omitempty"`
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *Message) GetTo() string {
	if o == nil || o.To == nil {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetToOk() (string, bool) {
	if o == nil || o.To == nil {
		var ret string
		return ret, false
	}
	return *o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *Message) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *Message) SetTo(v string) {
	o.To = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *Message) GetMessageId() string {
	if o == nil || o.MessageId == nil {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetMessageIdOk() (string, bool) {
	if o == nil || o.MessageId == nil {
		var ret string
		return ret, false
	}
	return *o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *Message) HasMessageId() bool {
	if o != nil && o.MessageId != nil {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *Message) SetMessageId(v string) {
	o.MessageId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Message) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetStatusOk() (string, bool) {
	if o == nil || o.Status == nil {
		var ret string
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Message) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Message) SetStatus(v string) {
	o.Status = &v
}

// GetRemainingBalance returns the RemainingBalance field value if set, zero value otherwise.
func (o *Message) GetRemainingBalance() string {
	if o == nil || o.RemainingBalance == nil {
		var ret string
		return ret
	}
	return *o.RemainingBalance
}

// GetRemainingBalanceOk returns a tuple with the RemainingBalance field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetRemainingBalanceOk() (string, bool) {
	if o == nil || o.RemainingBalance == nil {
		var ret string
		return ret, false
	}
	return *o.RemainingBalance, true
}

// HasRemainingBalance returns a boolean if a field has been set.
func (o *Message) HasRemainingBalance() bool {
	if o != nil && o.RemainingBalance != nil {
		return true
	}

	return false
}

// SetRemainingBalance gets a reference to the given string and assigns it to the RemainingBalance field.
func (o *Message) SetRemainingBalance(v string) {
	o.RemainingBalance = &v
}

// GetMessagePrice returns the MessagePrice field value if set, zero value otherwise.
func (o *Message) GetMessagePrice() string {
	if o == nil || o.MessagePrice == nil {
		var ret string
		return ret
	}
	return *o.MessagePrice
}

// GetMessagePriceOk returns a tuple with the MessagePrice field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetMessagePriceOk() (string, bool) {
	if o == nil || o.MessagePrice == nil {
		var ret string
		return ret, false
	}
	return *o.MessagePrice, true
}

// HasMessagePrice returns a boolean if a field has been set.
func (o *Message) HasMessagePrice() bool {
	if o != nil && o.MessagePrice != nil {
		return true
	}

	return false
}

// SetMessagePrice gets a reference to the given string and assigns it to the MessagePrice field.
func (o *Message) SetMessagePrice(v string) {
	o.MessagePrice = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Message) GetNetwork() string {
	if o == nil || o.Network == nil {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetNetworkOk() (string, bool) {
	if o == nil || o.Network == nil {
		var ret string
		return ret, false
	}
	return *o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Message) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Message) SetNetwork(v string) {
	o.Network = &v
}

// GetAccountRef returns the AccountRef field value if set, zero value otherwise.
func (o *Message) GetAccountRef() string {
	if o == nil || o.AccountRef == nil {
		var ret string
		return ret
	}
	return *o.AccountRef
}

// GetAccountRefOk returns a tuple with the AccountRef field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetAccountRefOk() (string, bool) {
	if o == nil || o.AccountRef == nil {
		var ret string
		return ret, false
	}
	return *o.AccountRef, true
}

// HasAccountRef returns a boolean if a field has been set.
func (o *Message) HasAccountRef() bool {
	if o != nil && o.AccountRef != nil {
		return true
	}

	return false
}

// SetAccountRef gets a reference to the given string and assigns it to the AccountRef field.
func (o *Message) SetAccountRef(v string) {
	o.AccountRef = &v
}

type NullableMessage struct {
	Value Message
	ExplicitNull bool
}

func (v NullableMessage) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}	
}

func (v *NullableMessage) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}

