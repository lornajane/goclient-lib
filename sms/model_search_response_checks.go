/*
 * Nexmo Verify API
 *
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * API version: 1.0.9
 * Contact: devrel@nexmo.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sms

import (
	"bytes"
	"encoding/json"
)

// SearchResponseChecks struct for SearchResponseChecks
type SearchResponseChecks struct {
	// The date and time this check was received (in the format YYYY-MM-DD HH:MM:SS)
	DateReceived *string `json:"date_received,omitempty"`
	// The code supplied with this check request
	Code *string `json:"code,omitempty"`
	Status *string `json:"status,omitempty"`
	// The IP address, if available
	IpAddress *string `json:"ip_address,omitempty"`
}

// GetDateReceived returns the DateReceived field value if set, zero value otherwise.
func (o *SearchResponseChecks) GetDateReceived() string {
	if o == nil || o.DateReceived == nil {
		var ret string
		return ret
	}
	return *o.DateReceived
}

// GetDateReceivedOk returns a tuple with the DateReceived field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseChecks) GetDateReceivedOk() (string, bool) {
	if o == nil || o.DateReceived == nil {
		var ret string
		return ret, false
	}
	return *o.DateReceived, true
}

// HasDateReceived returns a boolean if a field has been set.
func (o *SearchResponseChecks) HasDateReceived() bool {
	if o != nil && o.DateReceived != nil {
		return true
	}

	return false
}

// SetDateReceived gets a reference to the given string and assigns it to the DateReceived field.
func (o *SearchResponseChecks) SetDateReceived(v string) {
	o.DateReceived = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SearchResponseChecks) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseChecks) GetCodeOk() (string, bool) {
	if o == nil || o.Code == nil {
		var ret string
		return ret, false
	}
	return *o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SearchResponseChecks) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SearchResponseChecks) SetCode(v string) {
	o.Code = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SearchResponseChecks) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseChecks) GetStatusOk() (string, bool) {
	if o == nil || o.Status == nil {
		var ret string
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SearchResponseChecks) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SearchResponseChecks) SetStatus(v string) {
	o.Status = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *SearchResponseChecks) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseChecks) GetIpAddressOk() (string, bool) {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret, false
	}
	return *o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *SearchResponseChecks) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *SearchResponseChecks) SetIpAddress(v string) {
	o.IpAddress = &v
}

type NullableSearchResponseChecks struct {
	Value SearchResponseChecks
	ExplicitNull bool
}

func (v NullableSearchResponseChecks) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}	
}

func (v *NullableSearchResponseChecks) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}

